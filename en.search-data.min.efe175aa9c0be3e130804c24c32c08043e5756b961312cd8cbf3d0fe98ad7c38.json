[{"id":0,"href":"/docs/contests/Codeforces/Div2+ECR/ECR143/","title":"ECR143","section":"Div. 2, ECR","content":" 結果 # 丁度キーボードが届いた日のコンテストだったので、US配列に慣れる良い機会だと思って参加した。\n思ったより出来たので満足。 EFあたりが「これマルチケースなんですか…？」って感じの問題で実装が結構苦しかった。\n振り返り # A # 図があるな～と思いながら読んでた。一方の文字列の上から取った連続部分列をリバースして他方の文字列にくっつける操作しか出来ないことを確認して、sとtをリバースした物をくっつけてRR, BBの個数を数えた。もしも1つだけならそこで区切ればよいが、2つあったらどう分けても同じ色が隣接する部分が出てくるのでダメ。\n思ったよりスムーズに考察出来た気がしたがACまで6分強かかっててびっくりした。\nB # 制約小さいからごり押し探索でもやるのかな？と思って考察してみたけど、これ $l_i=k$ を満たすような $i$ と $r_j=k$ を満たすような $j$ があればよくない？となり、提出してAC。あんまり制約小さいのが生きなかったので不安だったが、ひっかけみたいなもんだと思うことにした。\nC # 図の意味がよくわからなかったのでスルーした。おもったより難しくて焦った。前から見て行って「今どんな量の飲み物が残っているか」がうまく管理できればいいよねって感じがしたので、その方針を考えてみる。$i$ 番目の人について考えているとき、残っている飲み物それぞれから $b_i$ を引く必要があり、この処理で $0$ を下回る飲み物には特別な処理が必要になりそう。全体から同じ数引くのは無理なので下駄を履かせてpriority_queueで常勝！って感じになる。\n考察が終わってみると大典型だった。\nD # 今回の問題の中で一番素朴だと思った。うまく配置すれば各トライアングル内で2本の辺を使うことができる。このとき、赤2つ青1つのトライアングルが $n/6$ 個、赤1つ青2つのトライアングルが $n/6$ 個となるので $\\displaystyle \\binom{n/3}{n/6}$ となる。トライアングル内の色の塗り方は\nすべて同じ重さ → 1通り 重さが2種類で重い方が2つ → 1通り 重さが2種類で軽い方が2つ → 2通り 重さが3種類 → 3通り となるので、あとは全部掛け合わせて終わり。\nD解き終わって問題一覧に戻るとEFGのAC人数がG \u0026gt; F \u0026gt; Eの順番になってて、どれから解くけばいいんだ…？となった。とりあえずE開いたら問題文が長かったのでFG解いてる人は問題文長いから後回しにしたんだろうと考え、順番通りEを解くことにした。\nE # 読むのだるかったが読んだ。爆発に必要なマナが増えるほどbasic spellの詠唱回数が減るから三分探索でもすんのかな？って思った。三分探索するとしたら結局爆破する位置によってbasic spellを何回唱えるか数える必要があるからこっち先に考えるか～という気分になる。\nある位置で爆破を起こした時、左を全消しするのに必要なマナと右を全消しするのに必要なマナが分かればよさそう。対称性があるので左を全消しにする場合だけ考える。昇順で見ていって $i$ 番目を考えているとき、「$i-1$番目を爆破したときに左を全消しするのに必要なコスト」からうまいこと計算出来ればいいなぁという気分になる。$h_{i-1} \u0026lt; h_{i}$ のときはそのまま引き継げばよいが、そうでない時は少し面倒。$h_{i-1}$ を $h_{i} - 1$ まで削る必要がある。さらに、これによって $h_{i-2}$ が爆破できるかも変わってきてしまう。どうしましょう…ってなって途方に暮れる。よく考えるとヘルスの差がずっと1の区間は先頭が削られたら後続も同じ分だけ減らさないといけない。よってこの処理はまとめられる。つまり連続してる区間を保存しておいて順番に見ていけば良く、これをやるにはstackが都合がいい。計算量を考えると、$i$ 番目を見ているとき、区間 $[i, i]$が追加されたと考える。これを元にstackの先頭を見て、削る必要があればpopして削り現在の区間に加える。削らなくてよいなら終了。と処理すれば追加された区間たちは高々1回popするだけで、popしない場合は各処理で一回ずつなので償却して $O(N)$ となる。\n実装するときは左を全消しするのに必要なコストを計算する関数を用意するとリバースしたやつ突っ込んで右も計算できるので楽。 こんな感じ ↕ コンテスト本番はこんなの書いてたけど、ちょくちょく無駄があります。\nvector\u0026lt;ll\u0026gt; calc(vector\u0026lt;ll\u0026gt; v) { int n = v.size(); stack\u0026lt;pll\u0026gt; st; st.push({v[0], v[0]}); vector\u0026lt;ll\u0026gt; ret(n, 0); rep(i, 1, n) { ret[i] = ret[i - 1]; ll lw = v[i], hi = v[i]; while (!st.empty()) { auto [l, h] = st.top(); if (h \u0026lt; lw) break; st.pop(); ret[i] += (l + h) * (h - l + 1) / 2; ll nlw = max(0ll, lw - h + l - 1); if (lw) ret[i] -= (lw - 1 + nlw) * (lw - nlw) / 2; lw = nlw; } st.push({lw, hi}); } return ret; } F # 最初チップが移動したら移動前の頂点は白色に戻ると思い込んでたけど、そんなことは無いらしい。ようはある頂点を端点とするパスを出来るだけ並列して沢山伸ばしたいってことっぽい。シミュレーションしてくのは流石に無理でしょって感じがした(衝突した時に伸ばしなおすんだろうけどどこに伸ばすかの宛てが無いのでむりそう)ので、どうにかしてパスの長さを決め打つことにした。最大と書いてあるので二分探索やね、となり二分探索してそれぞれのパスの長さを固定した。そうすると後は木DPをするだけで良い。\n子からパスは伸びてきているか 子孫のうち、使えるパスの最大長はどれくらいか を考慮して衝突した場合などをうまく処理してAC。実装に結構手こずった。というか考察があまい状態で実装を始めたので場合分けやDFSでの戻り値をどうするかなどで時間を食ってしまった。\nG # この時点で残り22分だったので、「さすがにACまでは無理だな…」と思いつつとりあえず問題文を読んだ。これ全消し出来ない場合はどうするの？と思ったが、\nAdditional constraint on the input: there always exists at least one valid sequence of removals.\nと書いてあったので考えなくて良いらしい。この条件から現在除外可能な頂点は隣り合うことがなくて、貪欲に取っていくことで除去する頂点の順番を表すDAGが出来るので、あとは各頂点に関して「自分からは到達できないし、相手からも到達できない」ような頂点を数え上げれば良さそうだと思った。これ、頭が回ってなくてDFSで出来ると思ってたけど全然できない。本番はDFS全力で書いていたら時間切れになってしまった。\n今のところbitset使うくらいしか思いつかない。\n感想 # 全体的に解法は結構すぐ浮かんだが、実装でわちゃわちゃしてしまった。JIS配列では書きやすかった記法がUS配列では指の動きが多くて大変ということが結構あったので、キーボードを変えるとコードの書き方も変わるようになるのかなと思った。あとEFは関数を多用したくて、そうなるとグローバル変数として全部置くのが楽なんだけどマルチケースなので初期化が必要になり、めんどいな…という気分になった。ラムダ式に感謝。\n最近のDiv2、毎回全完一歩手前で終わっちゃう。一回くらい全完してみたい。\nupsolve # そのうちやります。\n"},{"id":1,"href":"/docs/contests/","title":"参加記","section":"Docs","content":" 参加記 # 主にAtCoderやCodeforcesの参加記を書きます。基本的に本番の記録に使いますが、upsolve時の感想やシステスの感想なども書くかもしれません。また、面白いと思った問題は参加記とは別に解説を書いて見たいと思っています。\n"},{"id":2,"href":"/docs/editorial/","title":"解説","section":"Docs","content":" 解説 # ここでは面白いと思った問題の解説や、解説が難解だと感じた問題の自分なりの解釈書きます。\n"},{"id":3,"href":"/docs/books/","title":"参考書","section":"Docs","content":" 参考書 # ここには解説が載っていない参考書の自分なりの解答を書きます。ただし、分からない問題は欄だけ作成し、放置しておきます。間違いや、空白となっている問題の答えが分かった場合はtwitterのDMやGitHubのissueなどで教えてくれるととてもありがたいです。\n連絡先\n"}]