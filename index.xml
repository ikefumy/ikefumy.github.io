<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ikefumy's memo</title><link>http://ikefumy.github.io/</link><description>Recent content on ikefumy's memo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Feb 2023 11:18:36 +0900</lastBuildDate><atom:link href="http://ikefumy.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>ブログの構成(AsciiDoc ver)</title><link>http://ikefumy.github.io/post/asciitest/</link><pubDate>Sat, 11 Feb 2023 11:18:36 +0900</pubDate><guid>http://ikefumy.github.io/post/asciitest/</guid><description>&lt;div class="sect1">
&lt;h2 id="_概要">概要&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>HUGOとGitHub Pagesを利用して作りました。最初はjekyllで作っていたんですが、MathJaxが強制だったり(KaTeXを使いたい)選べるテーマが少なかったりする部分がイマイチだなぁと感じてました。あとこれは僕の技術力不足だと思うのですがWSL2を用いてプレビューしてたらminima以外のテーマを使うとエラーを吐かれたのでとりあえずminimaを使ってました。プラグイン周りの調べ物をしてたら「HUGO+GitHub Pagesでホームページを作った」みたいな記事を見つけ、「HUGO使えるの！？」となり、乗り換える事にしました。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_hugogithub_pagesのやり方">Hugo+GitHub Pagesのやり方&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Host on GitHub | Hugo&lt;/a> に案内があるので、それに従って環境構築したりGitHub Actionsの設定をしたりしました。ただ、 &lt;code>.github/workflows/gh-pages.yml&lt;/code> をそのままコピペしたらDeployのステップでpermission deniedと言われたので、 &lt;a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token">このページ&lt;/a> を参考に&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-yml" data-lang="yml"> permissions:
contents: write&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>を追記したら動きました。また、 &lt;code>resources&lt;/code> ディレクトリはキャッシュを貯めている場所らしいので消して良いと思い消したところ、GitHub Actionsのbuildでエラーが発生しました。エラーを読むと「 &lt;code>sass&lt;/code> ファイルはextendバージョンがいるよ」と書いてあったので &lt;code>gh-pages.yml&lt;/code> を以下のように書き換えました。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-yml" data-lang="yml"> with:
hugo-version: &amp;#39;latest&amp;#39;
extended: true&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_ブログの構成">ブログの構成&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>ここらへんで「jekyllである程度の物作れたのにHUGOを一からやり直すのだるくね？」という気分になってきました。KaTeXを使うために頑張ります。jekyllのままでも使えるんですが、回りくどい方法になりそうです。なんなら自分でGitHub Actionsを作って変換されないようにすればいいんじゃないかという気がしてきたんですが、できるかわからないのでとりあえずHUGOでやっています。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>好きなテーマを選び、それを改造していくという手段を取ります。あとPrism.jsをいれてそれを改造します。そのままでもいい気がしてきましたが、改造します。&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_テーマ">テーマ&lt;/h3>
&lt;div class="paragraph">
&lt;p>まず &lt;a href="https://themes.gohugo.io/">テーマ一覧&lt;/a> を見ます。ここから良さげなものを探し出して改造するんですが、レスポンシブデザインに対応しててほしいのでタグで絞り込みます。今回は &lt;a href="https://themes.gohugo.io/themes/hugo-theme-stack/">Stack&lt;/a> というテーマをベースにデザインすることにしました。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>ライセンスを見るとGPL-3.0-onlyとかいてあり、知らなかったので調べました。分かりませんでした。いかがでしたか？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>流石に勝手に改造するのはやばそうなのでもうちょっと頑張って調べた結果、改造はOK。再配布もOK。しかし再配布する場合はその再配布物もGPL-3.0ライセンスを使用する必要があるっぽいことが分かりました。ChatGPTもそういっていたので大丈夫だと思います。また、先ほどのサイトに&lt;/p>
&lt;/div>
&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>Please do not remove the “Theme Stack designed by Jimmy” text and link.&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;/div>
&lt;div class="paragraph">
&lt;p>と書いてありました。フッターに書いてあるので、これを消さないようにしておけば良さそうです。 ~~quick startのanankeと同じ要領で配置したりymlを書き換えたりします。~~ そのままsubmobule化すると &lt;code>hugo-theme-stack&lt;/code> をいじったときに本家にpushする羽目になるので、 &lt;strong>cloneするかforkしてforkしたものをsubmoduleしてください。&lt;/strong> 僕はsubmoduleが何かわからずいじっていたせいで面倒なことになりました。本家から &lt;code>submodule&lt;/code> して差分を &lt;code>root&lt;/code> ディレクトリに配置する方がいい気がするんですが、面倒なのでforkしてしまいました。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>さて、いざページを表示したらフォントが中国語っぽくなってしまいました。&lt;/p>
&lt;/div>
&lt;div class="imageblock">
&lt;div class="content">
&lt;img src="my-site.png" alt="my site"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>直します。デベロッパーツールで文字をクリックして元のfont-familyを探すと、以下のような部分を発見しました。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-css" data-lang="css">:root {
--sys-font-family: -apple-system, BlinkMacSystemFont, &amp;#34;Segoe UI&amp;#34;, &amp;#34;Droid Sans&amp;#34;, &amp;#34;Helvetica Neue&amp;#34;;
--zh-font-family: &amp;#34;PingFang SC&amp;#34;, &amp;#34;Hiragino Sans GB&amp;#34;, &amp;#34;Droid Sans Fallback&amp;#34;, &amp;#34;Microsoft YaHei&amp;#34;;
--base-font-family: &amp;#34;Lato&amp;#34;, var(--sys-font-family), var(--zh-font-family), sans-serif;
--code-font-family: Menlo, Monaco, Consolas, &amp;#34;Courier New&amp;#34;, monospace
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>これを書き換えれば良さそなので &lt;code>grep&lt;/code> でしらべたところ、 &lt;code>./themes/hugo-theme-stack/assets/scss/variables.scss&lt;/code> にあったのでこれを以下のように書き換えました。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-diff-css" data-lang="diff-css">:root {
--sys-font-family: -apple-system, BlinkMacSystemFont, &amp;#34;Segoe UI&amp;#34;, &amp;#34;Droid Sans&amp;#34;, &amp;#34;Helvetica Neue&amp;#34;;
- --zh-font-family: &amp;#34;PingFang SC&amp;#34;, &amp;#34;Hiragino Sans GB&amp;#34;, &amp;#34;Droid Sans Fallback&amp;#34;, &amp;#34;Microsoft YaHei&amp;#34;;
- --base-font-family: &amp;#34;Lato&amp;#34;, var(--sys-font-family), var(--zh-font-family), sans-serif;
+ --base-font-family: &amp;#34;Lato&amp;#34;, var(--sys-font-family), sans-serif;
--code-font-family: Menlo, Monaco, Consolas, &amp;#34;Courier New&amp;#34;, monospace;
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>これで文字はひとまず直りました。良さげなフォントがあったら適宜弄りたいと思います。 &lt;code>config.toml&lt;/code> でフォントを指定したCSSを読み込むなどの方法もあるらしいのですが、いたるところで &lt;code>--base-font-family&lt;/code> が使われていたので、ここを書き換えるのが一番手っ取り早いんじゃないかと思いました。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>ブログの構成(Markdown ver)</title><link>http://ikefumy.github.io/post/about/</link><pubDate>Fri, 10 Feb 2023 17:56:33 +0900</pubDate><guid>http://ikefumy.github.io/post/about/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>HUGOとGitHub Pagesを利用して作りました。最初はjekyllで作っていたんですが、MathJaxが強制だったり(KaTeXを使いたい)選べるテーマが少なかったりする部分がイマイチだなぁと感じてました。あとこれは僕の技術力不足だと思うのですがWSL2を用いてプレビューしてたらminima以外のテーマを使うとエラーを吐かれたのでとりあえずminimaを使ってました。プラグイン周りの調べ物をしてたら「HUGO+GitHub Pagesでホームページを作った」みたいな記事を見つけ、「HUGO使えるの！？」となり、乗り換える事にしました。&lt;/p>
&lt;h2 id="hugogithub-pagesのやり方">HUGO+GitHub Pagesのやり方&lt;/h2>
&lt;p>&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>Host on GitHub | Hugo&lt;/a>に案内があるので、それに従って環境構築したりGitHub Actionsの設定をしたりしました。ただ、&lt;code>.github/workflows/gh-pages.yml&lt;/code>をそのままコピペしたらDeployのステップでpermission deniedと言われたので、&lt;a class="link" href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token" target="_blank" rel="noopener"
>このページ&lt;/a>を参考に&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">permissions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">contents&lt;/span>: &lt;span style="color:#ae81ff">write&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>を追記したら動きました。また、&lt;code>resources&lt;/code>ディレクトリはキャッシュを貯めている場所らしいので消して良いと思い消したところ、GitHub Actionsのbuildでエラーが発生しました。エラーを読むと「&lt;code>sass&lt;/code>ファイルはextendバージョンがいるよ」と書いてあったので&lt;code>gh-pages.yml&lt;/code>を以下のように書き換えました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">extended&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ブログの構成">ブログの構成&lt;/h2>
&lt;p>ここらへんで「jekyllである程度の物作れたのにHUGOを一からやり直すのだるくね？」という気分になってきました。KaTeXを使うために頑張ります。jekyllのままでも使えるんですが、回りくどい方法になりそうです。なんなら自分でGitHub Actionsを作って変換されないようにすればいいんじゃないかという気がしてきたんですが、できるかわからないのでとりあえずHUGOでやっています。&lt;/p>
&lt;p>好きなテーマを選び、それを改造していくという手段を取ります。あとPrism.jsをいれてそれを改造します。そのままでもいい気がしてきましたが、改造します。&lt;/p>
&lt;h3 id="テーマ">テーマ&lt;/h3>
&lt;p>まず&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>テーマ一覧&lt;/a>を見ます。ここから良さげなものを探し出して改造するんですが、レスポンシブデザインに対応しててほしいのでタグで絞り込みます。今回は&lt;a class="link" href="https://themes.gohugo.io/themes/hugo-theme-stack/" target="_blank" rel="noopener"
>Stack&lt;/a>というテーマをベースにデザインすることにしました。&lt;/p>
&lt;p>ライセンスを見るとGPL-3.0-onlyとかいてあり、知らなかったので調べました。分かりませんでした。いかがでしたか？&lt;/p>
&lt;p>流石に勝手に改造するのはやばそうなのでもうちょっと頑張って調べた結果、改造はOK。再配布もOK。しかし再配布する場合はその再配布物もGPL-3.0ライセンスを使用する必要があるっぽいことが分かりました。ChatGPTもそういっていたので大丈夫だと思います。また、先ほどのサイトに&lt;/p>
&lt;blockquote>
&lt;p>Please do not remove the “Theme Stack designed by Jimmy” text and link.&lt;/p>
&lt;/blockquote>
&lt;p>と書いてありました。フッターに書いてあるので、これを消さないようにしておけば良さそうです。&lt;del>quick startのanankeと同じ要領で配置したりymlを書き換えたりします。&lt;/del> そのままsubmobule化すると&lt;code>hugo-theme-stack&lt;/code>をいじったときに本家にpushする羽目になるので、 &lt;strong>cloneするかforkしてforkしたものをsubmoduleしてください。&lt;/strong> 僕はsubmoduleが何かわからずいじっていたせいで面倒なことになりました。本家から&lt;code>submodule&lt;/code>して差分を&lt;code>root&lt;/code>ディレクトリに配置する方がいい気がするんですが、面倒なのでforkしてしまいました。&lt;/p>
&lt;p>さて、いざページを表示したらフォントが中国語っぽくなってしまいました。&lt;/p>
&lt;p>&lt;img src="http://ikefumy.github.io/post/about/my-site.png"
width="363"
height="259"
srcset="http://ikefumy.github.io/post/about/my-site_hu718726cad788e00b79fdf8502f82ee2f_17544_480x0_resize_box_3.png 480w, http://ikefumy.github.io/post/about/my-site_hu718726cad788e00b79fdf8502f82ee2f_17544_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="こんな感じ"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>直します。デベロッパーツールで文字をクリックして元のfont-familyを探すと、以下のような部分を発見しました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">root&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --sys-font-family: &lt;span style="color:#f92672">-&lt;/span>apple-system, BlinkMacSystemFont, &lt;span style="color:#e6db74">&amp;#34;Segoe UI&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Droid Sans&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Helvetica Neue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --zh-font-family: &lt;span style="color:#e6db74">&amp;#34;PingFang SC&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hiragino Sans GB&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Droid Sans Fallback&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Microsoft YaHei&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --base-font-family: &lt;span style="color:#e6db74">&amp;#34;Lato&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>sys&lt;span style="color:#f92672">-&lt;/span>font&lt;span style="color:#f92672">-&lt;/span>family), &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>zh&lt;span style="color:#f92672">-&lt;/span>font&lt;span style="color:#f92672">-&lt;/span>family), &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --code-font-family: Menlo, Monaco, Consolas, &lt;span style="color:#e6db74">&amp;#34;Courier New&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">monospace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを書き換えれば良さそなので&lt;code>grep&lt;/code>でしらべたところ、&lt;code>./themes/hugo-theme-stack/assets/scss/variables.scss&lt;/code>にあったのでこれを以下のように書き換えました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">root&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --sys-font-family: &lt;span style="color:#f92672">-&lt;/span>apple-system, BlinkMacSystemFont, &lt;span style="color:#e6db74">&amp;#34;Segoe UI&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Droid Sans&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Helvetica Neue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --base-font-family: &lt;span style="color:#e6db74">&amp;#34;Lato&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>sys&lt;span style="color:#f92672">-&lt;/span>font&lt;span style="color:#f92672">-&lt;/span>family), &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --code-font-family: Menlo, Monaco, Consolas, &lt;span style="color:#e6db74">&amp;#34;Courier New&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">monospace&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで文字はひとまず直りました。良さげなフォントがあったら適宜弄りたいと思います。&lt;code>config.toml&lt;/code>でフォントを指定したCSSを読み込むなどの方法もあるらしいのですが、いたるところで&lt;code>--base-font-family&lt;/code>が使われていたので、ここを書き換えるのが一番手っ取り早いんじゃないかと思いました。&lt;/p>
&lt;h3 id="prismjs">Prism.js&lt;/h3>
&lt;p>&lt;a class="link" href="http://blog.syati.info/post/add_syntaxhighlighter_to_hugo/" target="_blank" rel="noopener"
>このブログ&lt;/a>を参考にしました。ただしこのテーマは&lt;code>themes\hugo-theme-stack\layouts\partials&lt;/code>ディレクトリにfooterやheaderの&lt;code>html&lt;/code>ファイルが置いてあるのですが、そこに&lt;code>custom.html&lt;/code>というファイルがあって、これが読み込まれるようになっているので、ここに追記します。また&lt;code>static&lt;/code>ディレクトリに配置した要素は&lt;code>hugo&lt;/code>コマンドを打つと中身をルートにそのまま移すので&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/js/prism.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/css/prism.css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">media&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;screen, projection&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/css&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>としても良く、僕はこちらを追記しました。あと見た目をいろいろ弄りました。&lt;/p>
&lt;h3 id="katex">KaTeX&lt;/h3>
&lt;p>このテーマはデフォルトで $\KaTeX$ 使ってるので問題ないです。&lt;/p>
&lt;h3 id="ascii-doc">Ascii Doc&lt;/h3>
&lt;p>こういう便利なものがあるらしくて、markdownくらい書きやすく、markdownより表現力が高いらしいです。まず&lt;a class="link" href="https://itcweb.cc.affrc.go.jp/affrit/documents/guide/asciidoc/start" target="_blank" rel="noopener"
>Asciidocによる文書作成環境の構築 [AFFRIT Portal]&lt;/a>に従いAsciidoctorを入れてローカルに環境を構築します。あと&lt;code>archetypes&lt;/code>ディレクトリにテンプレートを登録しとくと&lt;code>hugo new ...&lt;/code>で新しく記事を作った時にコピーされるので設定します。Hugoは.adocファイルを扱うためにコマンドラインでasciidoctorを使うのですが、GitHub Actionsの環境にはこれが無いので、&lt;code>gh-pages.yml&lt;/code>に以下のように追記します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install asciidoctor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">sudo apt-get install -y asciidoctor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで使えるようになりました。しかしHugoでは属性が使えないのであんまり便利じゃないかもしれません&amp;hellip;。ちょっと使ってみた感じでは「俺はMarkdownで十分だな&amp;hellip;」と感じました。以下のような書き方で&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-adoc" data-lang="adoc">[NOTE]
====
NOTEです。ほかにもいろいろ出来ます。ここら辺をうまく使えば大分綺麗になりそうです。
====
&lt;/code>&lt;/pre>&lt;p>で&lt;code>&amp;lt;div class=&amp;quot;admonitionblock note&amp;quot;&amp;gt;&lt;/code>で囲まれたブロックを作れるので、これをCSSとかでうまく弄れば綺麗に使えそうです。今は使う機会がないので、使う時に整えます。&lt;/p></description></item></channel></rss>